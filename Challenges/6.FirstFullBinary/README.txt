Excellent! Ok, now that you have demonstrated an understanding of assembly, let's add some new techniques. This binary <LINK HERE> has not been truncated. The first thing you will likely notice is how much larger it is than the previous binaries. Part of this is due to header and footer bytes that let your computer understand and execute the file, but a lot of it is just infrastructure added by the compiler. You can control what infrastructure gets included to some extent, but all compilers will add in kilobytes or more of overhead to make sure your program operates correctly and avoids common security vulnerabilities. Fortunately, a lot of this information is what Ghidra has been expecting all along, so the analysis should proceed with less input from you than before. Take a look at the Functions list on the left. Ghidra automatically locates memory addresses that the code jumps to, and lists them here. Since we aren't interested in understanding the compiler overhead for now, try to find the obfuscation code from the previous question. What address does it start at?
Answer: 0010114a

Potential other question: What OS was this compiled on?
