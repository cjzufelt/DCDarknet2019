In this challenge, the user is to decompile a string (c char array, in this case) from the given simple program. The program has been compiled with gcc on an x86-64 bit little-endian system, which will need to be manually entered into Ghidra due to the program being stripped to only its vital bytes.
Answer: My Queen
XOR this with 5A to get 0x17237A0B2F3F3F34
Challenge 1: To use Ghidra, you first need to have a basic understanding of assembly. When you compile a program, your assembler takes your written code and converts it into a series of instructions for a processor. Different processor architectures use different machine instructions (or "opcodes"), which operate on some number of bits, generally to either move or change the bits in some way. Different compilers can have different methods for breaking your code into opcodes, which means that the process of compiling a program is not reversible. What a decompiler like Ghidra does is look at the raw binary of a program, try to determine what processor architecture the code is meant to run on, and then attempt to map the binary in the program to the opcodes of a processor to produce assembly code. Ghidra is a free tool for doing this, which is produced (and used) by the National Security Agency (NSA). To get started, download Ghidra and get it working (this may take some doing!), then create a new project and import <link here> this file. When you import this file, Ghidra likely won't automatically identify the processor, because we've stripped most of the file contents to make the assembly easier to understand. Specify that the Language was compiled for a 32-bit x86 processor by gcc. Ghidra will load the file and display a summary, which we'll cover in more detail in a later exercise. When you double click on the file, or click on the image of Ghidra (looks like a green dragon), it should pull up a new window and ask you if you want to analyze the code. You would! Scroll through all the different options to see what's there, but for now just use the defaults and click Analyze. <Now walk them through some assembly, talking about opcode and operands, and how the command for instance Moves the last operand byte TO the first operand byte> <Find string address?>
Challenge 2: Congrats! You've now used the same tool that the NSA uses, and solved <blah>! Now instead of just finding an address, let's try to use Ghidra to understand what some code is doing. This binary <link here> is a portion of a program which obfuscates (not encrypts!) data. You have observed some data going over a network that you monitor, but the data isn't making any sense. Analyze this binary in Ghidra using the same parameters as before. We want to look for opcodes that are changing data, instead of just moving it around. What opcode here actually changes the data it operates on? <XOR>
